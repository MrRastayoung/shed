#!/bin/bash
#
# shed-image -- A wrapper for Docker image management
#
# Joan Ordinas <jordinas@escoladeltreball.org>

declare -r VERSION='1.1'    # Shed version
declare -r SELF=${0##*/}

export LESS=\
'--chop-long-lines '\
'--clear-screen '\
'--hilite-search '\
'--HILITE-UNREAD '\
'--ignore-case '\
'--LONG-PROMPT '\
'--RAW-CONTROL-CHARS '\
'--squeeze-blank-lines '\
'--status-column '\

export LESS_TERMCAP_mb=$'\E[01;31m'        # begin blinking
export LESS_TERMCAP_md=$'\E[01;37m'        # begin bold
export LESS_TERMCAP_me=$'\E[0m'            # end mode
export LESS_TERMCAP_se=$'\E[0m'            # end standout-mode
export LESS_TERMCAP_so=$'\E[01;44;33m'     # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'            # end underline
export LESS_TERMCAP_us=$'\E[01;32m'        # begin underline

########################################################################
# Utililies
########################################################################

function pager {        # colorized less
    local color=$'\e''[92m'
    [[ $TERM == 'screen-256color' ]] && color=$'\e''[32m'
    [[ -z $PAGER ]] && PAGER=$(type -p less)
    sed -e s/^/$color/ | $PAGER
}

########################################################################
# Main and help
########################################################################

function main {
    (( $# > 0 )) || help_main

    local opt COMMAND

    while getopts :Vh-: opt; do
        case $opt in
            V) version ;; 
            h) help_main ;; 
            -)  case $OPTARG in
                    help) help_main ;;
                    *) usage option "--$OPTARG" ;;
                esac
                ;;
            ?) usage option "-$OPTARG" ;;
        esac
    done

    shift $((OPTIND-1)); OPTIND=1

    case $1 in
        b|bu|bui|buil|build) COMMAND='build' ;;
        commit) COMMAND='commit' ;;
        h|hi|his|hist|histo|histor|history) COMMAND='history' ;;
        i|im|ima|imag|image|images) COMMAND='images' ;;
        import) COMMAND='import' ;;
        lo|loa|load) COMMAND='load' ;;
        rm|rmi) COMMAND='rmi' ;;
        s|sa|sav|save) COMMAND='save' ;;
        t|ta|tag) COMMAND='tag' ;;
        *) usage command "$1" ;;
    esac

    shift
    image_$COMMAND "$@"
}

function version {
    echo "$SELF $VERSION"
    exit 0
}

function usage {
    cat 1>&2 <<EOF
Unknown $1: $2

Usage: $SELF [-h | --help | -V]
       $SELF COMMAND [ARGS]
EOF
    exit 1
}

function help_main {
    cat <<EOF | pager
Usage: $SELF [-h | --help | -V]
       $SELF COMMAND [ARGS]

Options:
    -h, --help  Help information
    -V          Show version information

Commands:
    build [OPTIONS] PATH | URL | -
        Build an image from a Dockerfile
    commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
        Create a new image from a container's changes
    history [OPTIONS] IMAGE
        Show the history of an image
    images [OPTIONS] [REPOSITORY]
        List images
    import [OPTIONS] file | URL | - [REPOSITORY[:TAG]]
        Create an empty filesystem image from the contents of a tarbal
    load [OPTIONS]
        Load an image from a tar archive
    rm [OPTIONS] IMAGE [IMAGE...]
        Remove one or more images
    save [OPTIONS] IMAGE [IMAGE...]
        Save an image to a tar archive
    tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
        Tag an image into a repository

Run '$SELF COMMAND --help' for more information on a command.
EOF
    exit 1
}

function help_command {
    local alt cmd=$1 arg=$2

    if [[ $cmd == *@* ]]; then
        alt=${cmd#*@}   # alternative alias
        cmd=${cmd%@*}
    fi

    if [[ $arg == '-h' || $arg == '--help' ]]; then
        docker $cmd --help 2>&1 \
            | sed -e '1d' -e "s/docker\s\+$cmd/$SELF ${alt:-$cmd}/g" \
            | pager
        exit 1
    fi
}

########################################################################
# Commands
########################################################################

# build [OPTIONS] PATH | URL | -
function image_build {
    help_command build "$@"
    (( $# > 0 )) || help_command build -h

    docker build "$@"
}

# commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
function image_commit {
    help_command commit "$@"
    (( $# > 0 )) || help_command commit -h

    docker commit "$@"
}

# history [OPTIONS] IMAGE
function image_history {
    help_command history "$@"
    (( $# > 0 )) || help_command history -h

    docker history "$@" 2>&1 | pager
}

# images [OPTIONS] [REPOSITORY]
function image_images {
    help_command images "$@"

    docker images "$@" \
        | sed -e '1s/VIRTUAL/V./' -e 's/ \+$//' -e 's/  \+/\t/g' \
        | { local line
            read -r line
            echo "$line"
            sort -
          } \
        | column --table --separator $'\t'
}

# import [OPTIONS] file | URL | - [REPOSITORY[:TAG]]
function image_import {
    help_command import "$@"
    (( $# > 0 )) || help_command import -h

    docker import "$@"
}

# load [OPTIONS]
function image_load {
    help_command load "$@"

    docker load "$@"
}

# rm [OPTIONS] IMAGE [IMAGE...]
function image_rmi {
    help_command rmi@rm "$@"
    (( $# > 0 )) || help_command rmi@rm -h

    docker rmi "$@"
}

# save [OPTIONS] IMAGE [IMAGE...]
function image_save {
    help_command save "$@"
    (( $# > 0 )) || help_command save -h

    docker save "$@"
}

# tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
function image_tag {
    help_command tag "$@"
    (( $# > 0 )) || help_command tag -h

    docker tag "$@"
}

########################################################################
# Call main
########################################################################

main "$@"

exit $?

# vim:syntax=sh:ai:sw=4:ts=4:et
