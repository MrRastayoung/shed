# Sample container Shedfile

########################################################################
# Image and command with arguments to `docker create`
########################################################################

# Base image
IMAGE='busybox'

# Command to run (a list of words or a string without spaces)
#CMD=( 'cmd' 'arg' 'arg' )
CMD=''

########################################################################
# Options do `docker create`
########################################################################

# -a, --attach=[]	Attach to STDIN, STDOUT or STDERR
ATTACH=()

# --add-host=[]		Add a custom host-to-IP mapping (host:ip)
ADD_HOST=()

# -c, --cpu-shares=0	CPU shares (relative weight)
CPU_SHARES=0

# --cap-add=[]		Add Linux capabilities
CAP_ADD=()

# --cap-drop=[]		Drop Linux capabilities
CAP_DROP=()

# --cidfile=""		Write the container ID to the file
CIDFILE=''

# --device=[]		Add a host device to the container
DEVICE=()

# --dns=[]		Set custom DNS servers
DNS=()

# --dns-search=[]	Set custom DNS search domains 
DNS_SEARCH=()

# -e, --env=[]		Set environment variables (the 'ENV' is reserved in the shell)
ENVIRON=(
	[PATH]='/bin:/usr/bin'
)

# --entrypoint=""	Overwrite the default ENTRYPOINT of the image
ENTRYPOINT='/bin/sh'

# --env-file=[]		Read in a lin file of environment variables
ENV_FILE=()

# --expose=[]		Expose a port or a range of ports
EXPOSE=()

# -h, --hostname=""	Container host name
HOSTNAME=$(basename $BASH_SOURCE .shed)

# -i, --interactive=false   
# 			Keep STDIN open even if not attached
INTERACTIVE='false'

# --ipc=""		IPC namespace to use
IPC=''

# --link=[]		Add link to another container
LINK=( )

# --lxc-conf=[]		Add custom lxc options
LXC_CONF=()

# -m, --memory=""	Memory limit
MEMORY=''

# --mac-address=""	Container MAC address (e.g. 92:d0:c6:0a:29:33)
MAC_ADDRESS=''

# --net=default		Set the Network mode for the container
NET='default'

# -P, --publish-all=false   
# 			Publish all exposed ports to random ports
PUBLISH_ALL='false'

# -p, --publish=[]	Publish a container's port to the host
PUBLISH=()

# --privileged=false	Give extended privileges to this container
PRIVILEGED='false'

# --restart=""		Restart policy to apply when a container exits
RESTART='no'

# --security-opt=[]	Security Options
SECURITY_OPT=()

# -t, --tty=false	Allocate a pseudo-TTY
TTY='false'

# -u, --user=""		Username or UID (format: <name|uid>[:<group|gid>])
USER='root'

# -v, --volume=[]	Bind mount a volume
VOLUME=()

# --volumes-from=[]	Mount volumes from the specified container(s)
VOLUMES_FROM=()

# -w, --workdir=""	Working directory inside the container
WORKDIR=''

# vim:syntax=sh:ai:sw=8:ts=8
