########################################################################
# Sample container Shedfile
########################################################################

# Base image
IMAGE='busybox'

# -a, --attach=[]	Attach to STDIN, STDOUT or STDERR
ATTACH=()

# --cap-add=[]		Add Linux capabilities
CAP_ADD=()

# --cap-drop=[]		Drop Linux capabilities
CAP_DROP=()

# --cidfile=""		Write the container ID to the file
CIDFILE=''

# Command to run (a list of words or a string without spaces)
#CMD=( 'cmd' 'arg' 'arg' )
CMD=''

# -c, --cpu-shares=0	CPU shares (relative weight)
CPU_SHARES=0

# --cpuset=""		CPUs in which to allow execution (0-3, 0,1)
CPUSET=''

# --dns=[]		Set custom DNS servers
DNS=()

# --dns-search=[]	Set custom DNS search domains (Use --dns-search=. if
#			you don't wish to set the search domain)
DNS_SEARCH=()

# --entrypoint=""	Overwrite the default ENTRYPOINT of the image
ENTRYPOINT='/bin/sh'

# --add-host=[]		Add a custom host-to-IP mapping (host:ip)
HOST=()

# --device=[]		Add a host device to the container (e.g.
#			--device=/dev/sdc:/dev/xvdc:rwm)
DEVICE=()

# -e, --env=[]		Set environment variables (ENV is reserved in the shell)
ENVIRON=(
	[PATH]='/bin:/usr/bin'
)

# --env-file=[]		Read in a line delimited file of environment variables
ENV_FILE=()

# --expose=[]		Expose a port or a range of ports (e.g.
#			--expose=3300-3310) from the container without
#			publishing it to your host
EXPOSE=()

# -h, --hostname=""	Container host name
HOSTNAME=$(basename $BASH_SOURCE .shed)

# -i, --interactive=false    Keep STDIN open even if not attached
INTERACTIVE='false'

# --ipc=""		Default is to create a private IPC namespace (POSIX
#			SysV IPC) for the container
# 			'container:<name|id>': reuses another container shared
# 			memory, semaphores and message queues
# 			'host': use the host shared memory,semaphores and
# 			message queues inside the container. 
# 			Note: the host mode gives the container full access to
# 			local shared memory and is therefore considered insecure.
IPC=''

# --link=[]		Add link to another container in the form of name:alias
LINK=( )

# --lxc-conf=[]		(lxc exec-driver only) Add custom lxc options
#			--lxc-conf="lxc.cgroup.cpuset.cpus = 0,1"
LXC_CONF=()

# -m, --memory=""	Memory limit (format: <number><optional unit>, where
#			unit = b, k, m or g)
MEMORY=''

# --mac-address=""	Container MAC address (e.g. 92:d0:c6:0a:29:33)
MAC_ADDRESS=''

# --net="bridge"	Set the Network mode for the container
# 			'bridge': creates a new network stack for the container
# 			on the docker bridge
# 			'none': no networking for this container
# 			'container:<name|id>': reuses another container network stack
# 			'host': use the host network stack inside the container. 
# 			Note: the host mode gives the container full access to
# 			local system services such as D-bus and is therefore
# 			considered insecure.
NET='bridge'

# --privileged=false	Give extended privileges to this container
PRIVILEGED='false'

# -p, --publish=[]	Publish a container's port to the host
# 			format: ip:hostPort:containerPort |
# 			ip::containerPort | hostPort:containerPort |
# 			containerPort (use 'docker port' to see the
# 			actual mapping)
PUBLISH=()

# -P, --publish-all=false    Publish all exposed ports to the host interfaces
PUBLISH_ALL='false'

# --restart=""		Restart policy to apply when a container exits
#			(no, on-failure[:max-retry], always)
RESTART='no'

# --security-opt=[]	Security Options
SECURITY_OPT=()

# -t, --tty=false	Allocate a pseudo-TTY
TTY='false'

# -u, --user=""		Username or UID
USER='root'

# -v, --volume=[]	Bind mount a volume (e.g., from the host:
#			-v /host:/container, from Docker: -v /container)
VOLUME=()

# --volumes-from=[]	Mount volumes from the specified container(s)
VOLUMES_FROM=()

# -w, --workdir=""	Working directory inside the container
WORKDIR=''

# vim:syntax=sh:ai:sw=8:ts=8
