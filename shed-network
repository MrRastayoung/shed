#!/bin/bash
#
# shed-network -- A wrapper for Docker network management
#
# Joan Ordinas <jordinas@escoladeltreball.org>

declare -r VERSION='1.1'    # Shed version
declare -r SELF=${0##*/}

export LESS=\
'--chop-long-lines '\
'--clear-screen '\
'--hilite-search '\
'--HILITE-UNREAD '\
'--ignore-case '\
'--LONG-PROMPT '\
'--RAW-CONTROL-CHARS '\
'--squeeze-blank-lines '\
'--status-column '\

export LESS_TERMCAP_mb=$'\E[01;31m'        # begin blinking
export LESS_TERMCAP_md=$'\E[01;37m'        # begin bold
export LESS_TERMCAP_me=$'\E[0m'            # end mode
export LESS_TERMCAP_se=$'\E[0m'            # end standout-mode
export LESS_TERMCAP_so=$'\E[01;44;33m'     # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'            # end underline
export LESS_TERMCAP_us=$'\E[01;32m'        # begin underline

########################################################################
# Utililies
########################################################################

function pager {        # colorized less
    local color=$'\e''[92m'
    [[ $TERM == 'screen-256color' ]] && color=$'\e''[32m'
    [[ -z $PAGER ]] && PAGER=$(type -p less)
    sed -e s/^/$color/ | $PAGER
}

########################################################################
# Main and help
########################################################################

function main {
    (( $# > 0 )) || help_main

    local opt COMMAND

    while getopts :Vh-: opt; do
        case $opt in
            V) version ;; 
            h) help_main ;; 
            -)  case $OPTARG in
                    help) help_main ;;
                    *) usage option "--$OPTARG" ;;
                esac
                ;;
            ?) usage option "-$OPTARG" ;;
        esac
    done

    shift $((OPTIND-1)); OPTIND=1

    case $1 in
        co|con|conn|conne|connec|connect) COMMAND='connect' ;;
        cre|crea|creat|create) COMMAND='create' ;;
        dis|disc|disco|discon|disconn|disconne|disconnec|disconnect) COMMAND='disconnect' ;;
        ins|insp|inspe|inspec|inspect) COMMAND='inspect' ;;
        l|ls) COMMAND='ls' ;;
        rm) COMMAND='rm' ;;
        *) usage command "$1" ;;
    esac

    shift
    network_$COMMAND "$@"
}

function version {
    echo "$SELF $VERSION"
    exit 0
}

function usage {
    cat 1>&2 <<EOF
Unknown $1: $2

Usage: $SELF [-h | --help | -V]
       $SELF COMMAND [ARGS]
EOF
    exit 1
}

function help_main {
    docker network --help 2>&1 \
        | sed -e '1d' -e "s/docker\s\+network/$SELF/g" \
        | pager
    exit 1
}

function help_command {
    local alt cmd=$1 arg=$2

    if [[ $cmd == *@* ]]; then
        alt=${cmd#*@}   # alternative alias
        cmd=${cmd%@*}
    fi

    if [[ $arg == '-h' || $arg == '--help' ]]; then
        docker $cmd --help 2>&1 \
            | sed -e '1d' -e "s/docker\s\+$cmd/$SELF ${alt:-$cmd}/g" \
            | pager
        exit 1
    fi
}

########################################################################
# Commands
########################################################################

# network connect [OPTIONS] NETWORK CONTAINER
function network_connect {
    help_command 'network connect'@connect "$@"
   (( $# > 1 )) || help_command 'network connect'@connect -h

    docker network connect "$@"
}

# network create [OPTIONS] NETWORK-NAME
function network_create {
    help_command 'network create'@create "$@"
   (( $# > 0 )) || help_command 'network create'@create -h

    docker network create "$@"
}

# network disconnect [OPTIONS] NETWORK CONTAINER
function network_disconnect {
    help_command 'network disconnect'@disconnect "$@"
   (( $# > 1 )) || help_command 'network disconnect'@disconnect -h

    docker network create "$@"
}

# network inspect [OPTIONS] NETWORK [NETWORK...]
function network_inspect {
    help_command 'network inspect'@inspect "$@"
   (( $# > 0 )) || help_command 'network inspect'@inspect -h

    docker network inspect "$@"
}

# network ls [OPTIONS]
function network_ls {
    help_command 'network ls'@ls "$@"

    docker network ls "$@"
}

# network rm [OPTIONS] NETWORK [NETWORK...]
function network_rm {
    help_command 'network rm'@rm "$@"
   (( $# > 0 )) || help_command 'network rm'@rm -h

    docker network rm "$@"
}

########################################################################
# Call main
########################################################################

main "$@"

exit $?

# vim:syntax=sh:ai:sw=4:ts=4:et
