# Sample container Shedfile

########################################################################
# Image name and command with arguments to `docker create`
########################################################################

# Base image
IMAGE="busybox:latest"

# Command to run (a list of words or a string without spaces)
CMD=('/bin/echo' 'Hello,' 'world!')
#CMD=''

########################################################################
# Options do `docker create`
########################################################################

# --add-host=[]
# Add a custom host-to-IP mapping (host:ip)
ADD_HOST=()

# -a, --attach=[]
# Attach to STDIN, STDOUT or STDERR
ATTACH=()

# --blkio-weight=0
# Block IO (relative weight), between 10 and 1000
BLKIO_WEIGHT=0

# --cap-add=[]
# Add Linux capabilities
CAP_ADD=()

# --cap-drop=[]
# Drop Linux capabilities
CAP_DROP=()

# --cgroup-parent=
# Optional parent cgroup for the container
CGROUP_PARENT=''

# --cidfile=""
# Write the container ID to the file
CIDFILE=''

# --cpu-period=0
# Limit CPU CFS (Completely Fair Scheduler) period
CPU_PERIOD=0

# --cpu-quota=0
# Limit CPU CFS (Completely Fair Scheduler) quota
CPU_QUOTA=0

# -c, --cpu-shares=0
# CPU shares (relative weight)
CPU_SHARES=0

# --cpuset-cpus=
# CPUs in which to allow execution (0-3, 0,1)
CPUSET_CPUS=0

# --cpuset-mems=
# MEMs in which to allow execution (0-3, 0,1)
CPUSET_MEMS=0

# --device=[]
# Add a host device to the container
DEVICE=()

# --disable-content-trust=true
# Skip image verification
DISABLE_CONTENT_TRUST='true'

# --dns=[]
# Set custom DNS servers
DNS=()

# --dns-search=[]
# Set custom DNS search domains
DNS_SEARCH=()

# --entrypoint=""
# Overwrite the default ENTRYPOINT of the image
ENTRYPOINT=''

# --env-file=[]
# Read in a lin file of environment variables
ENV_FILE=()

# -e, --env=[]
# Set environment variables (the 'ENV' is reserved in the shell)
ENVIRON=(
	[PATH]='/bin:/usr/bin'	# a key-value dictionary
)

# --expose=[]
# Expose a port or a range of ports
EXPOSE=()

# --group-add=[]
# Add additional groups to join
GROUP_ADD=()

# -h, --hostname=""
# Container host name
HOSTNAME=$(basename $BASH_SOURCE .shed)

# -i, --interactive=false
# Keep STDIN open even if not attached
INTERACTIVE='false'

# --ipc=""
# IPC namespace to use
IPC=''

# -l, --label=[]
# Set meta data on a container
LABEL=()

# --label-file=[]
# Read in a line delimited file of labels
LABEL_FILE=()

# --link=[]
# Add link to another container
LINK=()

# --log-driver=
# Logging driver for container
LOG_DRIVER=''

# --log-opt=[]
# Log driver options
LOG_OPT=()

# --lxc-conf=[]
# Add custom lxc options
LXC_CONF=()

# --mac-address=""
# Container MAC address (e.g. 92:d0:c6:0a:29:33)
MAC_ADDRESS=''

# -m, --memory=""
# Memory limit
MEMORY=''

# --memory-swap=
# Total memory (memory + swap), '-1' to disable swap
MEMORY_SWAP=''

# --memory-swappiness=-1
# Tuning container memory swappiness (0 to 100)
MEMORY_SWAPPINESS=-1

# --name=
# Assign a name to the container
# Defined in the Shedfile and in the -shed filename

# --net=default
# Set the Network mode for the container
NET='default'

# --oom-kill-disable=false
# Disable OOM Killer
OOM_KILL_DISABLE='false'

# --pid=
# PID namespace to use
PID=''

# -P, --publish-all=false
# Publish all exposed ports to random ports
PUBLISH_ALL='false'

# -p, --publish=[]
# Publish a container's port to the host
PUBLISH=()

# --privileged=false
# Give extended privileges to this container
PRIVILEGED='false'

# --read-only=false
# Mount the container's root filesystem as read only
READ_ONLY='false'

# --restart=""
# Restart policy to apply when a container exits
RESTART='no'

# --security-opt=[]
# Security Options
SECURITY_OPT=()

# -t, --tty=false
# Allocate a pseudo-TTY
TTY='true'

# --ulimit=[]
# Ulimit options
ULIMIT=()

# -u, --user=""
# Username or UID (format: <name|uid>[:<group|gid>])
USER='root'

# --uts=
# UTS namespace to use
UTS=''

# -v, --volume=[]
# Bind mount a volume
VOLUME=()

# --volume-driver=
# Optional volume driver for the container
VOLUME_DRIVER=''

# --volumes-from=[]
# Mount volumes from the specified container(s)
VOLUMES_FROM=()

# -w, --workdir=""
# Working directory inside the container
WORKDIR=''

# vim:syntax=sh:ai:sw=8:ts=8
